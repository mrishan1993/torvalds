"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.bidUpdate = void 0;
var tslib_1 = require("tslib");
var transaction_1 = require("../common/transaction");
var get_config_1 = require("../common/collection/get-config");
var bid_1 = require("../tx-code-store/order/bid");
var calculate_fees_1 = require("../common/calculate-fees");
var parse_tx_events_1 = require("../common/parse-tx-events");
var fix_amount_1 = require("../common/fix-amount");
var get_protocol_fee_1 = require("./get-protocol-fee");
var get_prepared_order_1 = require("./common/get-prepared-order");
function bidUpdate(fcl, auth, network, orderApi, collection, currency, order, price) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var preparedOrder, _a, name_1, map, protocolFees, txId, txResponse, simpleOrderId;
        return (0, tslib_1.__generator)(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!fcl) return [3 /*break*/, 4];
                    return [4 /*yield*/, (0, get_prepared_order_1.getPreparedOrder)(orderApi, order)];
                case 1:
                    preparedOrder = _b.sent();
                    _a = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _a.name, map = _a.map;
                    protocolFees = get_protocol_fee_1.getProtocolFee.percents(network);
                    return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, bid_1.getBidCode)(fcl, name_1).update(currency, preparedOrder.id, (0, fix_amount_1.fixAmount)(price), (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], (0, calculate_fees_1.calculateFees)(price, [protocolFees.buyerFee]), true), (0, calculate_fees_1.calculateFees)(price, preparedOrder.data.originalFees || []), true)), auth)];
                case 2:
                    txId = _b.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 3:
                    txResponse = _b.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(txResponse.events, "BidAvailable", "bidId");
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, txResponse), { orderId: parseInt(simpleOrderId) })];
                case 4: throw new Error("Fcl is required for purchasing");
            }
        });
    });
}
exports.bidUpdate = bidUpdate;
