"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sell = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var transaction_1 = require("../common/transaction");
var get_config_1 = require("../common/collection/get-config");
var check_price_1 = require("../common/check-price");
var parse_tx_events_1 = require("../common/parse-tx-events");
var item_1 = require("../common/item");
var order_legacy_1 = require("../tx-code-store/order/order-legacy");
var fix_amount_1 = require("../common/fix-amount");
var get_royalties_1 = require("./common/get-royalties");
function sell(fcl, auth, network, request) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var collection, currency, itemId, sellItemPrice, from, _a, _b, _c, _d, name_1, map, tokenId, txId, _e, _f, _g, _h, _j, _k, tx, simpleOrderId;
        return (0, tslib_1.__generator)(this, function (_l) {
            switch (_l.label) {
                case 0:
                    collection = request.collection, currency = request.currency, itemId = request.itemId, sellItemPrice = request.sellItemPrice;
                    (0, check_price_1.checkPrice)(sellItemPrice);
                    if (!fcl) return [3 /*break*/, 10];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_l.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_l.sent()).addr]);
                    _l.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    _d = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _d.name, map = _d.map;
                    tokenId = (0, item_1.extractTokenId)(itemId);
                    _e = transaction_1.runTransaction;
                    _f = [fcl,
                        map];
                    _h = (_g = (0, order_legacy_1.getOrderCodeLegacy)(name_1)).sell;
                    _j = [fcl,
                        currency,
                        tokenId,
                        (0, fix_amount_1.fixAmount)(sellItemPrice)];
                    if (!(name_1 === "RaribleNFT")) return [3 /*break*/, 6];
                    return [4 /*yield*/, (0, get_royalties_1.getFlowRaribleNftRoyalties)(fcl, network, from, tokenId)];
                case 5:
                    _k = _l.sent();
                    return [3 /*break*/, 7];
                case 6:
                    _k = [];
                    _l.label = 7;
                case 7: return [4 /*yield*/, _e.apply(void 0, _f.concat([_h.apply(_g, _j.concat([_k])),
                        auth]))];
                case 8:
                    txId = _l.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 9:
                    tx = _l.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, tx), { orderId: parseInt(simpleOrderId) })];
                case 10: throw new Error("Fcl is required for creating order");
            }
        });
    });
}
exports.sell = sell;
