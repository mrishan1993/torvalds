"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateOrder = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var transaction_1 = require("../common/transaction");
var get_config_1 = require("../common/collection/get-config");
var check_price_1 = require("../common/check-price");
var parse_tx_events_1 = require("../common/parse-tx-events");
var storefront_1 = require("../tx-code-store/order/storefront");
var order_legacy_1 = require("../tx-code-store/order/order-legacy");
var fix_amount_1 = require("../common/fix-amount");
var item_1 = require("../common/item");
var get_prepared_order_1 = require("./common/get-prepared-order");
var get_protocol_fee_1 = require("./get-protocol-fee");
var calculate_sale_cuts_1 = require("./common/calculate-sale-cuts");
var get_royalties_1 = require("./common/get-royalties");
function updateOrder(fcl, itemApi, orderApi, auth, network, request) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var collection, currency, sellItemPrice, order, from, _a, _b, _c, preparedOrder, _d, name_1, map, royalties, _e, _f, txId, _g, _h, _j, _k, _l, _m, tx, simpleOrderId, txId, tx, simpleOrderId;
        return (0, tslib_1.__generator)(this, function (_o) {
            switch (_o.label) {
                case 0:
                    collection = request.collection, currency = request.currency, sellItemPrice = request.sellItemPrice, order = request.order;
                    (0, check_price_1.checkPrice)(sellItemPrice);
                    if (!fcl) return [3 /*break*/, 19];
                    if (!auth) return [3 /*break*/, 2];
                    _b = types_1.toFlowAddress;
                    return [4 /*yield*/, auth()];
                case 1:
                    _a = _b.apply(void 0, [(_o.sent()).addr]);
                    return [3 /*break*/, 4];
                case 2:
                    _c = types_1.toFlowAddress;
                    return [4 /*yield*/, fcl.currentUser().snapshot()];
                case 3:
                    _a = _c.apply(void 0, [(_o.sent()).addr]);
                    _o.label = 4;
                case 4:
                    from = _a;
                    if (!from) {
                        throw new Error("FLOW-SDK: Can't get current user address");
                    }
                    return [4 /*yield*/, (0, get_prepared_order_1.getPreparedOrder)(orderApi, order)];
                case 5:
                    preparedOrder = _o.sent();
                    _d = (0, get_config_1.getCollectionConfig)(network, collection), name_1 = _d.name, map = _d.map;
                    if (!(network === "emulator")) return [3 /*break*/, 6];
                    _e = { royalties: [] };
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, itemApi.getNftItemById({ itemId: preparedOrder.itemId })];
                case 7:
                    _e = _o.sent();
                    _o.label = 8;
                case 8:
                    royalties = (_e).royalties;
                    _f = preparedOrder.make["@type"];
                    switch (_f) {
                        case "nft": return [3 /*break*/, 9];
                        case "fungible": return [3 /*break*/, 15];
                    }
                    return [3 /*break*/, 18];
                case 9:
                    _g = transaction_1.runTransaction;
                    _h = [fcl,
                        map];
                    _k = (_j = (0, order_legacy_1.getOrderCodeLegacy)(name_1)).update;
                    _l = [fcl,
                        currency,
                        preparedOrder.id,
                        (0, fix_amount_1.fixAmount)(sellItemPrice)];
                    if (!(name_1 === "RaribleNFT")) return [3 /*break*/, 11];
                    return [4 /*yield*/, (0, get_royalties_1.getFlowRaribleNftRoyalties)(fcl, network, from, (0, item_1.extractTokenId)((0, item_1.toFlowItemId)(preparedOrder.itemId)))];
                case 10:
                    _m = _o.sent();
                    return [3 /*break*/, 12];
                case 11:
                    _m = [];
                    _o.label = 12;
                case 12: return [4 /*yield*/, _g.apply(void 0, _h.concat([_k.apply(_j, _l.concat([_m])),
                        auth]))];
                case 13:
                    txId = _o.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 14:
                    tx = _o.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, tx), { orderId: parseInt(simpleOrderId) })];
                case 15: return [4 /*yield*/, (0, transaction_1.runTransaction)(fcl, map, (0, storefront_1.getOrderCode)(fcl, name_1).update(currency, preparedOrder.id, (0, calculate_sale_cuts_1.calculateSaleCuts)(from, (0, fix_amount_1.fixAmount)(sellItemPrice), (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], (preparedOrder.data.payouts || []), true), [
                        get_protocol_fee_1.getProtocolFee.percents(network).sellerFee
                    ], false), (preparedOrder.data.originalFees || []), true), (royalties || []), true))), auth)];
                case 16:
                    txId = _o.sent();
                    return [4 /*yield*/, (0, transaction_1.waitForSeal)(fcl, txId)];
                case 17:
                    tx = _o.sent();
                    simpleOrderId = (0, parse_tx_events_1.parseEvents)(tx.events, "ListingAvailable", "listingResourceID");
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, tx), { orderId: parseInt(simpleOrderId) })];
                case 18: throw new Error("Unknown token type: ".concat(preparedOrder.make["@type"]));
                case 19: throw new Error("Fcl is required for updating order");
            }
        });
    });
}
exports.updateOrder = updateOrder;
