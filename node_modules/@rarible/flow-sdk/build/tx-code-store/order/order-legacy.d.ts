import type { FclArgs } from "@rarible/fcl-types";
import type { FlowCurrency, FlowFee } from "../../types";
import type { FlowCollectionName } from "../../common/collection";
declare type OrderMethods = Record<"buy" | "sell" | "update", string>;
export declare type CodeByCurrency = Record<FlowCurrency, OrderMethods>;
export declare const orderCode: Record<string, CodeByCurrency>;
declare type GenerateCodeMEthodResponse = {
    cadence: string;
    args: ReturnType<FclArgs>;
};
declare type GenerateCodeMethod = (...args: any) => GenerateCodeMEthodResponse;
declare type GenerateCodeResponse = Record<"sell" | "buy" | "update" | "cancelOrder", GenerateCodeMethod>;
export declare function getOrderCodeLegacy(collection: FlowCollectionName): GenerateCodeResponse;
export declare function prepareFees(fees: FlowFee[]): {
    key: string;
    value: string;
}[];
export {};
