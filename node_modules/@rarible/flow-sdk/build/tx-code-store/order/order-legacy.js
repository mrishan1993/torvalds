"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareFees = exports.getOrderCodeLegacy = exports.orderCode = void 0;
var tslib_1 = require("tslib");
var t = (0, tslib_1.__importStar)(require("@onflow/types"));
var flow_sdk_scripts_1 = require("@rarible/flow-sdk-scripts");
var fix_amount_1 = require("../../common/fix-amount");
exports.orderCode = {
    RaribleNFT: {
        FLOW: {
            buy: flow_sdk_scripts_1.StorefrontRaribleNFT.buy_flow,
            sell: flow_sdk_scripts_1.StorefrontRaribleNFT.sell_flow,
            update: flow_sdk_scripts_1.StorefrontRaribleNFT.update_flow,
        },
        FUSD: {
            buy: flow_sdk_scripts_1.StorefrontRaribleNFT.buy_fusd,
            sell: flow_sdk_scripts_1.StorefrontRaribleNFT.sell_fusd,
            update: flow_sdk_scripts_1.StorefrontRaribleNFT.update_fusd,
        },
    },
    MotoGPCard: {
        FLOW: {
            buy: flow_sdk_scripts_1.StorefrontMotoGPCard.buy_flow,
            sell: flow_sdk_scripts_1.StorefrontMotoGPCard.sell_flow,
            update: flow_sdk_scripts_1.StorefrontMotoGPCard.update_flow,
        },
        FUSD: {
            buy: flow_sdk_scripts_1.StorefrontMotoGPCard.buy_fusd,
            sell: flow_sdk_scripts_1.StorefrontMotoGPCard.sell_fusd,
            update: flow_sdk_scripts_1.StorefrontMotoGPCard.update_fusd,
        },
    },
    Evolution: {
        FLOW: {
            buy: flow_sdk_scripts_1.StorefrontEvolution.buy_flow,
            sell: flow_sdk_scripts_1.StorefrontEvolution.sell_flow,
            update: flow_sdk_scripts_1.StorefrontEvolution.update_flow,
        },
        FUSD: {
            buy: flow_sdk_scripts_1.StorefrontEvolution.buy_fusd,
            sell: flow_sdk_scripts_1.StorefrontEvolution.sell_fusd,
            update: flow_sdk_scripts_1.StorefrontEvolution.update_fusd,
        },
    },
    TopShot: {
        FLOW: {
            buy: flow_sdk_scripts_1.StorefrontTopShot.buy_flow,
            sell: flow_sdk_scripts_1.StorefrontTopShot.sell_flow,
            update: flow_sdk_scripts_1.StorefrontTopShot.update_flow,
        },
        FUSD: {
            buy: flow_sdk_scripts_1.StorefrontTopShot.buy_fusd,
            sell: flow_sdk_scripts_1.StorefrontTopShot.sell_fusd,
            update: flow_sdk_scripts_1.StorefrontTopShot.update_fusd,
        },
    },
};
function getOrderCodeLegacy(collection) {
    return {
        sell: function (fcl, currency, tokenId, price, royalties) {
            var args = collection === "RaribleNFT" ?
                fcl.args([
                    fcl.arg(tokenId, t.UInt64),
                    fcl.arg(price, t.UFix64),
                    fcl.arg(prepareFees(royalties), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]) :
                fcl.args([fcl.arg(tokenId, t.UInt64), fcl.arg(price, t.UFix64)]);
            return {
                cadence: exports.orderCode[collection][currency].sell,
                args: args,
            };
        },
        buy: function (fcl, currency, orderId, address) {
            return {
                cadence: exports.orderCode[collection][currency].buy,
                args: fcl.args([fcl.arg(orderId, t.UInt64), fcl.arg(address, t.Address)]),
            };
        },
        update: function (fcl, currency, orderId, price, royalties) {
            var args = collection === "RaribleNFT" ?
                fcl.args([
                    fcl.arg(orderId, t.UInt64),
                    fcl.arg(price, t.UFix64),
                    fcl.arg(prepareFees(royalties), t.Dictionary({
                        key: t.Address,
                        value: t.UFix64,
                    })),
                ]) :
                fcl.args([fcl.arg(orderId, t.UInt64), fcl.arg(price, t.UFix64)]);
            return {
                cadence: exports.orderCode[collection][currency].update,
                args: args,
            };
        },
        cancelOrder: function (fcl, orderId) {
            return {
                cadence: flow_sdk_scripts_1.StorefrontCommon.remove_item,
                args: fcl.args([fcl.arg(orderId, t.UInt64)]),
            };
        },
    };
}
exports.getOrderCodeLegacy = getOrderCodeLegacy;
function prepareFees(fees) {
    return fees.map(function (f) { return ({
        key: f.account,
        value: (0, fix_amount_1.fixAmount)(f.value.toString()),
    }); });
}
exports.prepareFees = prepareFees;
