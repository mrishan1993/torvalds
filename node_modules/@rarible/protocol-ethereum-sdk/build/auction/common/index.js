"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AUCTION_BID_DATA_V1 = exports.AUCTION_HASH_TYPE = exports.getAuctionHash = exports.getAuctionOperationOptions = exports.AUCTION_DATA_TYPE = void 0;
var ethereumjs_util_1 = require("ethereumjs-util");
var id_1 = require("../../common/id");
exports.AUCTION_DATA_TYPE = (0, id_1.id)("V1");
function getAuctionOperationOptions(buyAssetType, value) {
    if (buyAssetType.assetClass === "ETH") {
        return { value: value };
    }
    return {};
}
exports.getAuctionOperationOptions = getAuctionOperationOptions;
function getAuctionHash(ethereum, config, auctionId) {
    if (!ethereum) {
        throw new Error("Wallet is undefined");
    }
    var hash = ethereum.encodeParameter(exports.AUCTION_HASH_TYPE, {
        contractAddress: config.auction,
        auctionId: auctionId,
    });
    return "0x" + (0, ethereumjs_util_1.keccak256)(Buffer.from(hash.substring(2), "hex")).toString("hex");
}
exports.getAuctionHash = getAuctionHash;
exports.AUCTION_HASH_TYPE = {
    components: [
        {
            name: "contractAddress",
            type: "address",
        },
        {
            name: "auctionId",
            type: "uint256",
        },
    ],
    name: "data",
    type: "tuple",
};
exports.AUCTION_BID_DATA_V1 = {
    components: [
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "payouts",
            type: "tuple[]",
        },
        {
            components: [
                {
                    name: "account",
                    type: "address",
                },
                {
                    name: "value",
                    type: "uint96",
                },
            ],
            name: "originFees",
            type: "tuple[]",
        },
    ],
    name: "data",
    type: "tuple",
};
