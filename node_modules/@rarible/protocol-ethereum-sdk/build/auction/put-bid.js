"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PutAuctionBid = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var action_1 = require("@rarible/action");
var wait_tx_1 = require("../common/wait-tx");
var get_price_1 = require("../common/get-price");
var auction_1 = require("./contracts/auction");
var common_1 = require("./common");
var PutAuctionBid = /** @class */ (function () {
    function PutAuctionBid(ethereum, config, approve, auctionApi) {
        var _this = this;
        this.ethereum = ethereum;
        this.config = config;
        this.approve = approve;
        this.auctionApi = auctionApi;
        this.putBid = action_1.Action.create({
            id: "approve",
            run: function (request) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
                var auctionHash, auction, price, _a, _b, _c, _d;
                return (0, tslib_1.__generator)(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            if (!this.ethereum) {
                                throw new Error("Wallet is undefined");
                            }
                            auctionHash = (0, common_1.getAuctionHash)(this.ethereum, this.config, request.auctionId);
                            return [4 /*yield*/, this.auctionApi.getAuctionByHash({ hash: auctionHash })];
                        case 1:
                            auction = _e.sent();
                            _a = types_1.toBigNumber;
                            return [4 /*yield*/, (0, get_price_1.getPrice)(this.ethereum, auction.buy, request.priceDecimal)];
                        case 2:
                            price = _a.apply(void 0, [(_e.sent()).toString()]);
                            if (!(auction.buy.assetClass !== "ETH")) return [3 /*break*/, 5];
                            _b = wait_tx_1.waitTx;
                            _c = this.approve;
                            _d = types_1.toAddress;
                            return [4 /*yield*/, this.ethereum.getFrom()];
                        case 3: return [4 /*yield*/, _b.apply(void 0, [_c.apply(this, [_d.apply(void 0, [_e.sent()]),
                                    { assetType: auction.buy, value: price },
                                    true])])];
                        case 4:
                            _e.sent();
                            _e.label = 5;
                        case 5: return [2 /*return*/, { request: request, auction: auction, price: price }];
                    }
                });
            }); },
        })
            .thenStep({
            id: "sign",
            run: function (_a) {
                var request = _a.request, auction = _a.auction, price = _a.price;
                return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
                    var bidData, bid, options;
                    return (0, tslib_1.__generator)(this, function (_b) {
                        if (!this.ethereum) {
                            throw new Error("Wallet is undefined");
                        }
                        bidData = this.ethereum.encodeParameter(common_1.AUCTION_BID_DATA_V1, {
                            payouts: request.payouts,
                            originFees: request.originFees,
                        });
                        bid = {
                            amount: price,
                            dataType: common_1.AUCTION_DATA_TYPE,
                            data: bidData,
                        };
                        options = (0, common_1.getAuctionOperationOptions)(auction.buy, price);
                        return [2 /*return*/, (0, auction_1.createEthereumAuctionContract)(this.ethereum, this.config.auction)
                                .functionCall("putBid", request.auctionId, bid)
                                .send(options)];
                    });
                });
            },
        });
    }
    return PutAuctionBid;
}());
exports.PutAuctionBid = PutAuctionBid;
