import type { Ethereum } from "@rarible/ethereum-provider";
import type { Erc20AssetType, EthAssetType } from "@rarible/ethereum-api-client";
import type { Part } from "@rarible/ethereum-api-client";
import type { Maybe } from "@rarible/types/build/maybe";
import type { BigNumber } from "@rarible/types";
import type { BigNumberValue } from "@rarible/utils/build/bn";
import type { EthereumTransaction } from "@rarible/ethereum-provider";
import { Action } from "@rarible/action";
import type { EthereumConfig } from "../config/type";
import type { ApproveFunction } from "../order/approve";
import type { AssetTypeRequest } from "../order/check-asset-type";
import type { RaribleEthereumApis } from "../common/apis";
export declare type CreateAuctionRequest = {
    makeAssetType: AssetTypeRequest;
    amount: BigNumber;
    takeAssetType: EthAssetType | Erc20AssetType;
    minimalStepDecimal: BigNumberValue;
    minimalPriceDecimal: BigNumberValue;
    duration: number;
    startTime?: number;
    buyOutPriceDecimal: BigNumberValue;
    payouts: Part[];
    originFees: Part[];
};
export declare type AuctionStartAction = Action<"approve" | "sign", CreateAuctionRequest, EthereumTransaction>;
export declare class StartAuction {
    private readonly ethereum;
    private readonly config;
    private readonly approve;
    private readonly apis;
    private readonly checkAssetType;
    constructor(ethereum: Maybe<Ethereum>, config: EthereumConfig, approve: ApproveFunction, apis: RaribleEthereumApis);
    readonly start: AuctionStartAction;
}
