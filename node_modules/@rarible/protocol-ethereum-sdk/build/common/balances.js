"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Balances = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("@rarible/utils");
var Balances = /** @class */ (function () {
    function Balances(ethereum, erc20BalanceController) {
        this.ethereum = ethereum;
        this.erc20BalanceController = erc20BalanceController;
        this.getBalance = this.getBalance.bind(this);
    }
    Balances.prototype.getBalance = function (address, assetType) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var _a, _b, balance;
            return (0, tslib_1.__generator)(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = assetType.assetClass;
                        switch (_a) {
                            case "ETH": return [3 /*break*/, 1];
                            case "ERC20": return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 5];
                    case 1:
                        if (!this.ethereum) {
                            throw new Error("Wallet is undefined");
                        }
                        _b = utils_1.toBn;
                        return [4 /*yield*/, this.ethereum.getBalance(address)];
                    case 2: return [2 /*return*/, _b.apply(void 0, [_c.sent()])
                            .div(new utils_1.BigNumber(10).pow(18))];
                    case 3: return [4 /*yield*/, this.erc20BalanceController.getErc20Balance({
                            contract: assetType.contract,
                            owner: address,
                        })];
                    case 4:
                        balance = _c.sent();
                        return [2 /*return*/, (0, utils_1.toBn)(balance.decimalBalance)];
                    case 5: throw new Error("Asset class is not supported");
                }
            });
        });
    };
    return Balances;
}());
exports.Balances = Balances;
