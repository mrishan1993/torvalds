"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deployTestChainId = void 0;
var tslib_1 = require("tslib");
var abi = [
    {
        inputs: [],
        name: "getChainID",
        outputs: [
            {
                internalType: "uint256",
                name: "id",
                type: "uint256",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
var bytecode = "0x6080604052348015600f57600080fd5b5060878061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063564b81ef14602d575b600080fd5b60336049565b6040518082815260200191505060405180910390f35b60004690509056fea26469706673582212205617b576866dcc49713d04a8fe0ed372be382a360a8b4d598aedbbe73119443c64736f6c63430007060033";
function deployTestChainId(web3) {
    return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
        var empty, address;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0:
                    empty = createTestChaiId(web3);
                    return [4 /*yield*/, web3.eth.getAccounts()];
                case 1:
                    address = (_a.sent())[0];
                    return [2 /*return*/, empty.deploy({ data: bytecode }).send({ from: address, gas: 4000000, gasPrice: "0" })];
            }
        });
    });
}
exports.deployTestChainId = deployTestChainId;
function createTestChaiId(web3, address) {
    return new web3.eth.Contract(abi, address);
}
