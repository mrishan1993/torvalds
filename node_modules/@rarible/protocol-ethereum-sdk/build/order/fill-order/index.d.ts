import type { Ethereum } from "@rarible/ethereum-provider";
import type { Maybe } from "@rarible/types/build/maybe";
import type { SimpleOrder } from "../types";
import type { SendFunction } from "../../common/send-transaction";
import type { EthereumConfig } from "../../config/type";
import type { RaribleEthereumApis } from "../../common/apis";
import type { FillOrderAction, FillOrderRequest } from "./types";
import { RaribleV1OrderHandler } from "./rarible-v1";
import { RaribleV2OrderHandler } from "./rarible-v2";
import { OpenSeaOrderHandler } from "./open-sea";
import { CryptoPunksOrderHandler } from "./crypto-punks";
import type { OrderFillTransactionData } from "./types";
export declare class OrderFiller {
    private readonly ethereum;
    private readonly send;
    private readonly config;
    private readonly apis;
    v1Handler: RaribleV1OrderHandler;
    v2Handler: RaribleV2OrderHandler;
    openSeaHandler: OpenSeaOrderHandler;
    punkHandler: CryptoPunksOrderHandler;
    private checkAssetType;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, config: EthereumConfig, apis: RaribleEthereumApis);
    private getFillAction;
    /**
     * @deprecated Use {@link buy} or {@link acceptBid} instead
     */
    fill: FillOrderAction;
    /**
     * Buy order
     */
    buy: FillOrderAction;
    /**
     * Accept bid order
     */
    acceptBid: FillOrderAction;
    private invertOrder;
    private approveOrder;
    private sendTransaction;
    private getTransactionRequestData;
    getTransactionData(request: FillOrderRequest): Promise<OrderFillTransactionData>;
    getOrderFee(order: SimpleOrder): Promise<number>;
    getBaseOrderFillFee(order: SimpleOrder): Promise<number>;
}
