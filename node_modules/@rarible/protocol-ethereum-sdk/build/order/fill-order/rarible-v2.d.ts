import type { Address } from "@rarible/ethereum-api-client";
import type { Ethereum, EthereumSendOptions, EthereumTransaction } from "@rarible/ethereum-provider";
import type { Maybe } from "@rarible/types/build/maybe";
import type { EthereumConfig } from "../../config/type";
import type { SendFunction } from "../../common/send-transaction";
import type { SimpleRaribleV2Order } from "../types";
import type { OrderHandler, RaribleV2OrderFillRequest } from "./types";
import type { OrderFillSendData } from "./types";
export declare class RaribleV2OrderHandler implements OrderHandler<RaribleV2OrderFillRequest> {
    readonly ethereum: Maybe<Ethereum>;
    readonly send: SendFunction;
    readonly config: EthereumConfig;
    constructor(ethereum: Maybe<Ethereum>, send: SendFunction, config: EthereumConfig);
    invert(request: RaribleV2OrderFillRequest, maker: Address): SimpleRaribleV2Order;
    approve(order: SimpleRaribleV2Order, infinite: boolean): Promise<void>;
    getTransactionData(initial: SimpleRaribleV2Order, inverted: SimpleRaribleV2Order): Promise<OrderFillSendData>;
    sendTransaction(initial: SimpleRaribleV2Order, inverted: SimpleRaribleV2Order): Promise<EthereumTransaction>;
    fixForTx(order: SimpleRaribleV2Order): Promise<any>;
    getMatchV2Options(left: SimpleRaribleV2Order, right: SimpleRaribleV2Order): EthereumSendOptions;
    getMakeAssetWithFee(order: SimpleRaribleV2Order): import("@rarible/ethereum-api-client").Asset;
    getOrderFee(order: SimpleRaribleV2Order): number;
    getBaseOrderFee(): number;
}
