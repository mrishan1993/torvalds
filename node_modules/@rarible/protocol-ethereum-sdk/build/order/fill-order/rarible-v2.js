"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RaribleV2OrderHandler = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var sign_order_1 = require("../sign-order");
var get_asset_with_fee_1 = require("../get-asset-with-fee");
var approve_1 = require("../approve");
var exchange_v2_1 = require("../contracts/exchange-v2");
var wait_tx_1 = require("../../common/wait-tx");
var is_signer_1 = require("../../common/is-signer");
var fix_signature_1 = require("../../common/fix-signature");
var invert_order_1 = require("./invert-order");
var RaribleV2OrderHandler = /** @class */ (function () {
    function RaribleV2OrderHandler(ethereum, send, config) {
        this.ethereum = ethereum;
        this.send = send;
        this.config = config;
    }
    RaribleV2OrderHandler.prototype.invert = function (request, maker) {
        var inverted = (0, invert_order_1.invertOrder)(request.order, request.amount, maker);
        switch (request.order.data.dataType) {
            case "RARIBLE_V2_DATA_V1": {
                inverted.data = {
                    dataType: "RARIBLE_V2_DATA_V1",
                    originFees: request.originFees || [],
                    payouts: request.payouts || [],
                };
                break;
            }
            case "RARIBLE_V2_DATA_V2": {
                inverted.data = {
                    dataType: "RARIBLE_V2_DATA_V2",
                    originFees: request.originFees || [],
                    payouts: request.payouts || [],
                    isMakeFill: !request.order.data.isMakeFill,
                };
                break;
            }
            default: throw new Error("Unsupported order dataType");
        }
        return inverted;
    };
    RaribleV2OrderHandler.prototype.approve = function (order, infinite) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var withFee;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.ethereum) {
                            throw new Error("Wallet undefined");
                        }
                        withFee = this.getMakeAssetWithFee(order);
                        return [4 /*yield*/, (0, wait_tx_1.waitTx)((0, approve_1.approve)(this.ethereum, this.send, this.config.transferProxies, order.maker, withFee, infinite))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RaribleV2OrderHandler.prototype.getTransactionData = function (initial, inverted) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var exchangeContract, functionCall, _a, _b, _c;
            return (0, tslib_1.__generator)(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!this.ethereum) {
                            throw new Error("Wallet undefined");
                        }
                        exchangeContract = (0, exchange_v2_1.createExchangeV2Contract)(this.ethereum, this.config.exchange.v2);
                        _b = (_a = exchangeContract).functionCall;
                        _c = ["matchOrders"];
                        return [4 /*yield*/, this.fixForTx(initial)];
                    case 1:
                        functionCall = _b.apply(_a, _c.concat([_d.sent(), (0, fix_signature_1.fixSignature)(initial.signature) || "0x",
                            (0, sign_order_1.orderToStruct)(this.ethereum, inverted),
                            (0, fix_signature_1.fixSignature)(inverted.signature) || "0x"]));
                        return [2 /*return*/, {
                                functionCall: functionCall,
                                options: this.getMatchV2Options(initial, inverted),
                            }];
                }
            });
        });
    };
    RaribleV2OrderHandler.prototype.sendTransaction = function (initial, inverted) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var _a, functionCall, options;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getTransactionData(initial, inverted)];
                    case 1:
                        _a = _b.sent(), functionCall = _a.functionCall, options = _a.options;
                        return [2 /*return*/, this.send(functionCall, options)];
                }
            });
        });
    };
    RaribleV2OrderHandler.prototype.fixForTx = function (order) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var hash, isMakerSigner;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.ethereum) {
                            throw new Error("Wallet undefined");
                        }
                        hash = (0, sign_order_1.hashToSign)(this.config, this.ethereum, order);
                        return [4 /*yield*/, (0, is_signer_1.isSigner)(this.ethereum, order.maker, hash, order.signature)];
                    case 1:
                        isMakerSigner = _a.sent();
                        return [2 /*return*/, (0, sign_order_1.orderToStruct)(this.ethereum, order, !isMakerSigner)];
                }
            });
        });
    };
    RaribleV2OrderHandler.prototype.getMatchV2Options = function (left, right) {
        if (left.make.assetType.assetClass === "ETH" && left.salt === types_1.ZERO_WORD) {
            var asset = this.getMakeAssetWithFee(left);
            return { value: asset.value };
        }
        else if (right.make.assetType.assetClass === "ETH" && right.salt === types_1.ZERO_WORD) {
            var asset = this.getMakeAssetWithFee(right);
            return { value: asset.value };
        }
        else {
            return {};
        }
    };
    RaribleV2OrderHandler.prototype.getMakeAssetWithFee = function (order) {
        return (0, get_asset_with_fee_1.getAssetWithFee)(order.make, this.getOrderFee(order));
    };
    RaribleV2OrderHandler.prototype.getOrderFee = function (order) {
        return order.data.originFees.map(function (f) { return f.value; }).reduce(function (v, acc) { return v + acc; }, 0) + this.getBaseOrderFee();
    };
    RaribleV2OrderHandler.prototype.getBaseOrderFee = function () {
        return this.config.fees.v2;
    };
    return RaribleV2OrderHandler;
}());
exports.RaribleV2OrderHandler = RaribleV2OrderHandler;
