import type { Ethereum } from "@rarible/ethereum-provider";
import type { Fcl } from "@rarible/fcl-types";
import { Blockchain } from "@rarible/api-client";
import type { TezosProvider } from "@rarible/tezos-sdk";
import type { AbstractWallet, UserSignature } from "./domain";
export declare class EthereumWallet<T extends Ethereum = Ethereum> implements AbstractWallet {
    readonly ethereum: T;
    readonly blockchain = Blockchain.ETHEREUM;
    constructor(ethereum: T);
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare class FlowWallet implements AbstractWallet {
    readonly fcl: Fcl;
    readonly blockchain = Blockchain.FLOW;
    constructor(fcl: Fcl);
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare class TezosWallet implements AbstractWallet {
    readonly provider: TezosProvider;
    readonly blockchain = Blockchain.TEZOS;
    constructor(provider: TezosProvider);
    signPersonalMessage(message: string): Promise<UserSignature>;
}
export declare type BlockchainWallet = EthereumWallet<Ethereum> | FlowWallet | TezosWallet;
export declare type WalletByBlockchain = {
    "FLOW": FlowWallet;
    "ETHEREUM": EthereumWallet;
    "TEZOS": TezosWallet;
};
