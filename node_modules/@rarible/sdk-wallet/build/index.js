"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TezosWallet = exports.FlowWallet = exports.EthereumWallet = void 0;
var tslib_1 = require("tslib");
var api_client_1 = require("@rarible/api-client");
var tezos_sdk_1 = require("@rarible/tezos-sdk");
var EthereumWallet = /** @class */ (function () {
    function EthereumWallet(ethereum) {
        this.ethereum = ethereum;
        this.blockchain = api_client_1.Blockchain.ETHEREUM;
    }
    EthereumWallet.prototype.signPersonalMessage = function (message) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var address;
            var _a;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.ethereum.getFrom()];
                    case 1:
                        address = _b.sent();
                        if (!address) {
                            throw new Error("Not connected to Ethereum blockchain");
                        }
                        _a = {};
                        return [4 /*yield*/, this.ethereum.personalSign(message)];
                    case 2: return [2 /*return*/, (_a.signature = _b.sent(),
                            _a.publicKey = address,
                            _a)];
                }
            });
        });
    };
    return EthereumWallet;
}());
exports.EthereumWallet = EthereumWallet;
var FlowWallet = /** @class */ (function () {
    function FlowWallet(fcl) {
        this.fcl = fcl;
        this.blockchain = api_client_1.Blockchain.FLOW;
    }
    FlowWallet.prototype.signPersonalMessage = function (message) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var messageHex, currentUser, user, address, account, signatures, signature, pubKey;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!message.length) {
                            throw new Error("Message can't be empty");
                        }
                        messageHex = Buffer.from(message).toString("hex");
                        currentUser = this.fcl.currentUser();
                        return [4 /*yield*/, this.fcl.currentUser().snapshot()];
                    case 1:
                        user = _a.sent();
                        address = user.addr;
                        if (!address) {
                            throw new Error("Not connected to Flow blockchain");
                        }
                        return [4 /*yield*/, this.fcl.account(address)];
                    case 2:
                        account = _a.sent();
                        return [4 /*yield*/, currentUser.signUserMessage(messageHex)];
                    case 3:
                        signatures = _a.sent();
                        if (typeof signatures === "string") {
                            throw new Error(signatures);
                        }
                        signature = signatures.find(function (s) {
                            return s.addr.toLowerCase() === address.toLowerCase();
                        });
                        if (signature) {
                            pubKey = account.keys.find(function (k) { return k.index === signature.keyId; });
                            if (!pubKey) {
                                throw new Error("Key with index \"" + signature.keyId + "\" not found on account with address " + address);
                            }
                            return [2 /*return*/, {
                                    signature: signature.signature,
                                    publicKey: pubKey.publicKey,
                                }];
                        }
                        throw new Error("Signature of user address \"" + address + "\" not found");
                }
            });
        });
    };
    return FlowWallet;
}());
exports.FlowWallet = FlowWallet;
var TezosWallet = /** @class */ (function () {
    function TezosWallet(provider) {
        this.provider = provider;
        this.blockchain = api_client_1.Blockchain.TEZOS;
    }
    TezosWallet.prototype.signPersonalMessage = function (message) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var publicKey, result;
            return (0, tslib_1.__generator)(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.provider.public_key()];
                    case 1:
                        publicKey = _a.sent();
                        if (publicKey === undefined) {
                            throw new Error("Public key undefined");
                        }
                        return [4 /*yield*/, (0, tezos_sdk_1.sign)(this.provider, message, "message")];
                    case 2:
                        result = _a.sent();
                        return [2 /*return*/, {
                                signature: result.signature,
                                publicKey: result.edpk + "_" + result.prefix,
                            }];
                }
            });
        });
    };
    return TezosWallet;
}());
exports.TezosWallet = TezosWallet;
