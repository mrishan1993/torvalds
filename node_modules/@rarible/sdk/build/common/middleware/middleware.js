"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Middlewarer = void 0;
var tslib_1 = require("tslib");
var utils_1 = require("./utils");
var SKIP_MIDDLEWARE = Symbol("SKIP_MIDDLEWARE");
var Middlewarer = /** @class */ (function () {
    function Middlewarer() {
        this.middlewares = [];
    }
    /**
     * Add middleware to chain
     */
    Middlewarer.prototype.use = function (middleware) {
        this.middlewares.push(middleware);
        return this;
    };
    /**
     * Call method with middlewares chain
     *
     * @param callable - original method for call
     * @param ...args - callable arguments
     */
    Middlewarer.prototype.call = function (callable) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var wrappedCallable, callbacks, _a, _b, mid, cb, res, _c, callbacks_1, mid;
            var _d;
            return (0, tslib_1.__generator)(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        wrappedCallable = callable;
                        callbacks = [];
                        _a = 0, _b = this.middlewares;
                        _e.label = 1;
                    case 1:
                        if (!(_a < _b.length)) return [3 /*break*/, 4];
                        mid = _b[_a];
                        cb = undefined;
                        return [4 /*yield*/, mid(wrappedCallable, args)];
                    case 2:
                        (_d = _e.sent(), wrappedCallable = _d[0], cb = _d[1]);
                        if (cb) {
                            callbacks.push(cb);
                        }
                        _e.label = 3;
                    case 3:
                        _a++;
                        return [3 /*break*/, 1];
                    case 4:
                        res = (0, utils_1.toPromise)(wrappedCallable.apply(void 0, args));
                        for (_c = 0, callbacks_1 = callbacks; _c < callbacks_1.length; _c++) {
                            mid = callbacks_1[_c];
                            res = (0, utils_1.toPromise)(mid(res));
                        }
                        return [4 /*yield*/, res];
                    case 5: return [2 /*return*/, _e.sent()];
                }
            });
        });
    };
    /**
     * Wrap function to execute with middlewares in future
     * @example
     * 	function fn(i: number) { ... }
     * 	const wrappedFn = middlewarer.wrap(fn)
     * 	fn(10)
     *
     * @param callable
     * @param meta metadata for new method
     */
    Middlewarer.prototype.wrap = function (callable, meta) {
        var _this = this;
        if (meta === void 0) { meta = {}; }
        if (callable.hasOwnProperty(SKIP_MIDDLEWARE)) {
            return callable;
        }
        var fnName = (meta === null || meta === void 0 ? void 0 : meta.methodName) || callable.name || "anonymous";
        if (isAction(callable)) {
            var _loop_1 = function (step) {
                var originRun = step.run;
                step.run = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return _this.call.apply(_this, (0, tslib_1.__spreadArray)([originRun], args, false));
                };
                Object.defineProperty(originRun, "name", { value: fnName + "." + step.id, writable: false });
            };
            // @ts-ignore
            for (var _i = 0, _a = callable.steps; _i < _a.length; _i++) {
                var step = _a[_i];
                _loop_1(step);
            }
            return callable;
        }
        else {
            Object.defineProperty(callable, "name", { value: fnName, writable: false });
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _this.call.apply(_this, (0, tslib_1.__spreadArray)([callable], args, false));
            };
        }
    };
    /**
     * Wrap all methods in object
     *
     * @param object
     * @param meta metadata for new method
     */
    Middlewarer.prototype.wrapObjectMethods = function (object, meta) {
        for (var prop in object) {
            if (object.hasOwnProperty(prop) && typeof object[prop] === "function") {
                object[prop] = this.wrap(object[prop], {
                    methodName: (meta.namespace ? meta.namespace + "." : "") + prop,
                });
            }
        }
    };
    Middlewarer.skipMiddleware = function (something) {
        return Object.defineProperty(something, SKIP_MIDDLEWARE, { value: true, writable: false });
    };
    return Middlewarer;
}());
exports.Middlewarer = Middlewarer;
function isAction(fun) {
    return !!fun.steps;
}
