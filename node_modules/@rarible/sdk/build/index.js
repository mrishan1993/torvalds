"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCollectionId = exports.createRaribleSdk = void 0;
var tslib_1 = require("tslib");
var types_1 = require("@rarible/types");
var domain_1 = require("./domain");
var config_1 = require("./config");
var ethereum_1 = require("./sdk-blockchains/ethereum");
var flow_1 = require("./sdk-blockchains/flow");
var tezos_1 = require("./sdk-blockchains/tezos");
var union_1 = require("./sdk-blockchains/union");
var apis_1 = require("./common/apis");
var middleware_1 = require("./common/middleware/middleware");
var logger_middleware_1 = require("./common/logger/logger-middleware");
function createRaribleSdk(wallet, env, config) {
    var blockchainConfig = (0, config_1.getSdkConfig)(env);
    var apis = (0, apis_1.createApisSdk)(env, config === null || config === void 0 ? void 0 : config.apiClientParams);
    var instance = (0, union_1.createUnionSdk)((0, ethereum_1.createEthereumSdk)(filterWallet(wallet, "ETHEREUM"), apis, blockchainConfig.ethereumEnv, config === null || config === void 0 ? void 0 : config.apiClientParams, config === null || config === void 0 ? void 0 : config.logs), (0, flow_1.createFlowSdk)(filterWallet(wallet, "FLOW"), apis, blockchainConfig.flowEnv), (0, tezos_1.createTezosSdk)(filterWallet(wallet, "TEZOS"), apis, blockchainConfig.tezosNetwork), (0, ethereum_1.createEthereumSdk)(filterWallet(wallet, "ETHEREUM"), apis, blockchainConfig.polygonNetwork, config === null || config === void 0 ? void 0 : config.apiClientParams, config === null || config === void 0 ? void 0 : config.logs));
    setupMiddleware(apis, instance, { wallet: wallet, env: env, config: config });
    return (0, tslib_1.__assign)((0, tslib_1.__assign)({}, instance), { nft: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, instance.nft), { mintAndSell: createMintAndSell(instance.nft.mint, instance.order.sell) }), order: (0, tslib_1.__assign)((0, tslib_1.__assign)({}, instance.order), { sell: createSell(instance.order.sell, apis) }), apis: apis });
}
exports.createRaribleSdk = createRaribleSdk;
/**
 * Create middleware controller & wrap methods
 */
function setupMiddleware(apis, internalSdk, sdkContext) {
    var _a, _b, _c, _d, _e;
    var middlewarer = new middleware_1.Middlewarer();
    if (((_a = sdkContext.config) === null || _a === void 0 ? void 0 : _a.logs) !== domain_1.LogsLevel.DISABLED) {
        middlewarer.use((0, logger_middleware_1.getInternalLoggerMiddleware)((_c = (_b = sdkContext.config) === null || _b === void 0 ? void 0 : _b.logs) !== null && _c !== void 0 ? _c : domain_1.LogsLevel.TRACE, sdkContext));
    }
    for (var _i = 0, _f = ((_e = (_d = sdkContext.config) === null || _d === void 0 ? void 0 : _d.middlewares) !== null && _e !== void 0 ? _e : []); _i < _f.length; _i++) {
        var middleware = _f[_i];
        middlewarer.use(middleware);
    }
    for (var prop in apis) {
        //@ts-ignore
        //todo: better wrap for apis methods
        middlewarer.wrapObjectMethods(apis[prop], { namespace: "apis." + prop });
    }
    for (var prop in internalSdk) {
        //@ts-ignore
        middlewarer.wrapObjectMethods(internalSdk[prop], { namespace: prop });
    }
}
function filterWallet(wallet, blockchain) {
    if ((wallet === null || wallet === void 0 ? void 0 : wallet.blockchain) === blockchain) {
        return wallet;
    }
    return undefined;
}
function createSell(sell, apis) {
    var _this = this;
    return function (_a) {
        var itemId = _a.itemId;
        return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
            var item, collectionId, response;
            return (0, tslib_1.__generator)(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, apis.item.getItemById({ itemId: itemId })];
                    case 1:
                        item = _b.sent();
                        collectionId = (0, types_1.toContractAddress)(item.contract);
                        return [4 /*yield*/, sell({ collectionId: collectionId })];
                    case 2:
                        response = _b.sent();
                        return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)({}, response), { maxAmount: item.supply, submit: response.submit
                                    .before(function (input) { return ((0, tslib_1.__assign)({ itemId: itemId }, input)); }) })];
                }
            });
        });
    };
}
function createMintAndSell(mint, sell) {
    var _this = this;
    return function (request) { return (0, tslib_1.__awaiter)(_this, void 0, void 0, function () {
        var mintResponse, collectionId, sellResponse, mintAction, sellAction;
        return (0, tslib_1.__generator)(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mint(request)];
                case 1:
                    mintResponse = _a.sent();
                    collectionId = getCollectionId(request);
                    return [4 /*yield*/, sell({ collectionId: collectionId })];
                case 2:
                    sellResponse = _a.sent();
                    mintAction = mintResponse.submit
                        .around(function (input) { return ((0, tslib_1.__assign)({}, input)); }, function (mintResponse, initial) { return ({ initial: initial, mintResponse: mintResponse }); });
                    sellAction = sellResponse.submit
                        .around(function (_a) {
                        var initial = _a.initial, mintResponse = _a.mintResponse;
                        return ((0, tslib_1.__assign)((0, tslib_1.__assign)({}, initial), { itemId: mintResponse.itemId, amount: initial.supply }));
                    }, function (orderId, _a) {
                        var mintResponse = _a.mintResponse;
                        return ((0, tslib_1.__assign)((0, tslib_1.__assign)({}, mintResponse), { orderId: orderId }));
                    });
                    return [2 /*return*/, (0, tslib_1.__assign)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, mintResponse), sellResponse), { submit: mintAction.thenAction(sellAction) })];
            }
        });
    }); };
}
function getCollectionId(req) {
    if ("collection" in req) {
        return req.collection.id;
    }
    return req.collectionId;
}
exports.getCollectionId = getCollectionId;
