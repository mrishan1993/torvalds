"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EthereumBalance = void 0;
var tslib_1 = require("tslib");
var common_1 = require("./common");
var EthereumBalance = /** @class */ (function () {
    function EthereumBalance(sdk) {
        this.sdk = sdk;
        this.getBalance = this.getBalance.bind(this);
    }
    EthereumBalance.prototype.convertAssetType = function (assetType) {
        switch (assetType["@type"]) {
            case "ETH": {
                return { assetClass: "ETH" };
            }
            case "ERC20": {
                return {
                    assetClass: "ERC20",
                    contract: (0, common_1.convertToEthereumAddress)(assetType.contract),
                };
            }
            default: {
                throw new Error("Unsupported asset type=" + assetType["@type"]);
            }
        }
    };
    EthereumBalance.prototype.getBalance = function (address, assetType) {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function () {
            var ethAddress, convertedAssetType;
            return (0, tslib_1.__generator)(this, function (_a) {
                ethAddress = (0, common_1.convertToEthereumAddress)(address);
                convertedAssetType = this.convertAssetType(assetType);
                return [2 /*return*/, this.sdk.balances.getBalance(ethAddress, convertedAssetType)];
            });
        });
    };
    return EthereumBalance;
}());
exports.EthereumBalance = EthereumBalance;
