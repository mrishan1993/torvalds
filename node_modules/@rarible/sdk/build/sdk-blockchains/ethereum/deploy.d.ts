import type { RaribleSdk } from "@rarible/protocol-ethereum-sdk";
import { Action } from "@rarible/action";
import type { Address, ContractAddress, UnionAddress } from "@rarible/types";
import { BlockchainEthereumTransaction } from "@rarible/sdk-transaction";
import type { EthereumTransaction } from "@rarible/ethereum-provider";
import type { EthereumNetwork } from "@rarible/protocol-ethereum-sdk/build/types";
import type { DeployTokenRequest, EthereumDeployTokenAsset } from "../../types/nft/deploy/domain";
export declare class EthereumDeploy {
    private sdk;
    private network;
    private readonly blockchain;
    constructor(sdk: RaribleSdk, network: EthereumNetwork);
    convertOperatorsAddresses(operators: UnionAddress[]): Address[];
    convertDeployResponse(response: {
        tx: EthereumTransaction;
        address: Address;
    }): {
        tx: BlockchainEthereumTransaction;
        address: ContractAddress;
    };
    startDeployToken(asset: EthereumDeployTokenAsset): Promise<{
        tx: EthereumTransaction;
        address: Address;
    }>;
    deployToken: Action<"send-tx", DeployTokenRequest<import("../../types/nft/deploy/domain").DeploySupportedBlockchains>, {
        tx: BlockchainEthereumTransaction;
        address: ContractAddress;
    }>;
}
