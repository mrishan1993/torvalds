import type { FlowContractAddress, FlowCurrency } from "@rarible/flow-sdk";
import type { ItemId, OrderId } from "@rarible/api-client";
import type { ContractAddress, FlowAddress, UnionAddress } from "@rarible/types";
import type { FlowFee } from "@rarible/flow-sdk/build/types";
import type { FlowItemId as FlowItemIdSdk } from "@rarible/flow-sdk";
import type { FlowItemId } from "../../../../common/domain";
import type { UnionPart } from "../../../../types/order/common";
/**
 * Get flow collection from union collection
 * @param collection - e.g. "FLOW:A.0xabcdef0123456789.ContractName", contract address can be unprefixed
 */
export declare function getFlowCollection(collection: ContractAddress): FlowContractAddress;
/**
 * Parse union item id
 * @param unionItemId - e.g. "FLOW:A.0xabcdef0123456789.ContractName:123", contract address can be unprefixed
 * @returns blockchain, collectionId, itemId
 */
export declare function parseUnionItemId(unionItemId: ItemId): FlowItemId;
/**
 * Get maker account address
 * @param maker - "FLOW:0xabcdef0123456789", address can be unprefixed
 */
export declare function parseFlowAddressFromUnionAddress(maker: UnionAddress): FlowAddress;
/**
 *
 * @param id - "FLOW:{any count of digits}"
 */
export declare function parseOrderId(id: string): number;
/**
 * Get fungible token name
 * @param contract - e.g. "FLOW:A.0xabcdef0123456789.ContractName", contract address can be unprefixed
 */
export declare function getFungibleTokenName(contract: ContractAddress): FlowCurrency;
export declare function convertToFlowAddress(contractAddress: UnionAddress | ContractAddress): FlowAddress;
export declare function toFlowParts(parts: UnionPart[] | undefined): FlowFee[];
export declare function convertFlowOrderId(orderId: number): OrderId;
export declare function convertFlowItemId(itemId: FlowItemIdSdk): ItemId;
export declare function convertFlowContractAddress(contractAddress: string): ContractAddress;
export declare function convertFlowUnionAddress(address: string): UnionAddress;
