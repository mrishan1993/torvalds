import type { NftCollectionControllerApi } from "tezos-api-client/build";
import type { ContractAddress } from "@rarible/types";
import type { TezosProvider } from "@rarible/tezos-sdk/dist/common/base";
import type { TezosNetwork } from "@rarible/tezos-sdk/dist/common/base";
import type { PrepareMintRequest } from "../../types/nft/mint/prepare-mint-request.type";
import type { PrepareMintResponse } from "../../types/nft/mint/domain";
import type { MintRequest } from "../../types/nft/mint/mint-request.type";
import type { HasCollection, HasCollectionId } from "../../types/nft/mint/prepare-mint-request.type";
import type { PreprocessMetaRequest } from "../../types/nft/mint/preprocess-meta";
import type { ITezosAPI, MaybeProvider, TezosMetadataResponse, TezosMetaContent } from "./common";
export declare class TezosMint {
    private provider;
    private apis;
    private network;
    constructor(provider: MaybeProvider<TezosProvider>, apis: ITezosAPI, network: TezosNetwork);
    getFormatsMeta(meta: PreprocessMetaRequest): TezosMetaContent[];
    preprocessMeta(meta: PreprocessMetaRequest): TezosMetadataResponse;
    getOwner(request: MintRequest): Promise<string>;
    mint(prepareRequest: PrepareMintRequest): Promise<PrepareMintResponse>;
}
export declare function getCollectionData(api: NftCollectionControllerApi, prepareRequest: HasCollection | HasCollectionId): Promise<{
    contract: string;
    owner?: string;
    type: "NFT" | "MT";
}>;
export declare function getContractFromRequest(request: HasCollection | HasCollectionId): ContractAddress;
