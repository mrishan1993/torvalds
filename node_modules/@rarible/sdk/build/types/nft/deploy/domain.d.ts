import type * as ApiClient from "@rarible/api-client";
import type { IBlockchainTransaction } from "@rarible/sdk-transaction";
import type { ContractAddress, UnionAddress } from "@rarible/types";
import type { Action } from "@rarible/action";
export declare type DeployTokenRequest<T extends DeploySupportedBlockchains = DeploySupportedBlockchains> = {
    blockchain: T;
    asset: DeployTokenAssetIndexer[T];
};
export interface DeployTokenAssetIndexer extends Record<DeploySupportedBlockchains, DeployTokenAsset> {
    [ApiClient.Blockchain.ETHEREUM]: EthereumDeployTokenAsset;
    [ApiClient.Blockchain.TEZOS]: TezosDeployTokenAsset;
}
export declare type DeploySupportedBlockchains = ApiClient.Blockchain.ETHEREUM | ApiClient.Blockchain.TEZOS;
export declare type DeployTokenAsset = EthereumDeployTokenAsset | TezosDeployTokenAsset;
export declare type TezosDeployTokenAsset = {
    assetType: "NFT" | "MT";
    arguments: {
        name: string;
        symbol: string;
        contractURI: string;
        isUserToken: boolean;
    };
};
export declare type EthereumDeployTokenAsset = {
    assetType: "ERC721" | "ERC1155";
    arguments: DeployUserTokenArguments | DeployNonUserTokenArguments;
};
export declare type DeployNonUserTokenArguments = {
    name: string;
    symbol: string;
    baseURI: string;
    contractURI: string;
    isUserToken: false;
};
export declare type DeployUserTokenArguments = Omit<DeployNonUserTokenArguments, "isUserToken"> & {
    isUserToken: true;
    operators: UnionAddress[];
};
export declare type DeployResponse = {
    tx: IBlockchainTransaction;
    address: ContractAddress;
};
export declare type IDeploy = Action<"send-tx", DeployTokenRequest, DeployResponse>;
