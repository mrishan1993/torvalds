import * as apiTypes from './prepare-mint-request.type';
export declare const SCHEMA: {
    $schema: string;
    definitions: {
        PrepareMintRequest: {
            anyOf: ({
                type: string;
                additionalProperties: boolean;
                properties: {
                    collection: {
                        $ref: string;
                    };
                    tokenId: {
                        $ref: string;
                    };
                    collectionId?: undefined;
                };
                required: string[];
            } | {
                type: string;
                additionalProperties: boolean;
                properties: {
                    collectionId: {
                        $ref: string;
                    };
                    tokenId: {
                        $ref: string;
                    };
                    collection?: undefined;
                };
                required: string[];
            })[];
        };
        TokenId: {
            type: string;
            properties: {
                tokenId: {
                    type: string;
                };
                signature: {
                    type: string;
                    properties: {
                        v: {
                            type: string;
                        };
                        r: {
                            $ref: string;
                        };
                        s: {
                            $ref: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        Binary: {
            type: string;
        };
        Collection: {
            type: string;
            properties: {
                id: {
                    $ref: string;
                };
                blockchain: {
                    $ref: string;
                };
                type: {
                    $ref: string;
                };
                name: {
                    type: string;
                };
                symbol: {
                    type: string;
                };
                owner: {
                    $ref: string;
                };
                features: {
                    type: string;
                    items: {
                        $ref: string;
                    };
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        ContractAddress: {
            type: string;
        };
        Blockchain: {
            type: string;
            enum: string[];
        };
        CollectionType: {
            type: string;
            enum: string[];
        };
        UnionAddress: {
            type: string;
        };
        CollectionFeatures: {
            type: string;
            enum: string[];
        };
        HasCollection: {
            type: string;
            properties: {
                collection: {
                    $ref: string;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        HasCollectionId: {
            type: string;
            properties: {
                collectionId: {
                    $ref: string;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
    };
};
export declare function validatePrepareMintRequest(payload: unknown): apiTypes.PrepareMintRequest;
export declare function isPrepareMintRequest(payload: unknown): payload is apiTypes.PrepareMintRequest;
export declare function validateHasCollection(payload: unknown): apiTypes.HasCollection;
export declare function isHasCollection(payload: unknown): payload is apiTypes.HasCollection;
export declare function validateHasCollectionId(payload: unknown): apiTypes.HasCollectionId;
export declare function isHasCollectionId(payload: unknown): payload is apiTypes.HasCollectionId;
