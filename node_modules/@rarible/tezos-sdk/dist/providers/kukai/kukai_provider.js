"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.kukai_provider = void 0;
var base_1 = require("../../common/base");
var bignumber_js_1 = require("bignumber.js");
var beacon_sdk_1 = require("@airgap/beacon-sdk");
function get_user(embed) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!embed.user) return [3 /*break*/, 1];
                    return [2 /*return*/, embed.user];
                case 1: return [4 /*yield*/, embed.login()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function mk_transfer_params(arg) {
    var amount = (new bignumber_js_1.default(arg.amount).times(1000000)).toString();
    var kind = beacon_sdk_1.TezosOperationType.TRANSACTION;
    var destination = arg.to;
    var parameters = (arg.parameter) ? { entrypoint: arg.parameter.entrypoint, value: arg.parameter.value } : undefined;
    return { kind: kind, destination: destination, amount: amount, parameters: parameters };
}
// export class KukaiSigner implements Signer {
//   constructor(
//     private embed: KukaiEmbed
//   ) {}
//   async publicKey(): Promise<string> {
//     const user = await get_user(this.embed)
//     return user.pk
//   }
//   async publicKeyHash(): Promise<string> {
//     const user = await get_user(this.embed)
//     return user.pkh
//   }
//   async secretKey(): Promise<string> {
//     throw new Error('Secret key cannot be exposed');
//   }
//   async sign(bytes: string, watermark?: Uint8Array): Promise<{ bytes: string; prefixSig: string; sbytes: string; sig: string }> {
//     const payload = (watermark) ? uint8array_to_hex(watermark) + bytes : bytes
//     const prefixSig = await this.embed.signExpr(payload)
//     let prefix : Uint8Array;
//     switch (prefixSig.substring(0, 4)) {
//       case 'edsig':
//         prefix = edsig_prefix
//         break
//       case 'spsig':
//         prefix = spsig1_prefix
//         break
//       case 'p2sig':
//         prefix = p2sig_prefix
//         break
//       default:
//         throw new Error(`signature {prefixSig} is not valid`)
//     }
//     let b = b58dec(prefixSig, prefix)
//     const sig = b58enc(b, sig_prefix)
//     const sbytes = bytes + uint8array_to_hex(b)
//     return {sig, prefixSig, bytes, sbytes }
//   }
// }
function kukai_provider(embed, tk) {
    return __awaiter(this, void 0, void 0, function () {
        var transfer, originate, batch, sign, address, public_key, balance, chain_id, storage;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, embed.init()];
                case 1:
                    _a.sent();
                    transfer = function (arg) { return __awaiter(_this, void 0, void 0, function () {
                        var hash, confirmation;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, embed.send([mk_transfer_params(arg)])];
                                case 1:
                                    hash = _a.sent();
                                    confirmation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        var r;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4 /*yield*/, embed.trackOperation(hash)];
                                                case 1:
                                                    r = _a.sent();
                                                    if (r.failed)
                                                        throw new Error(r.error);
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); };
                                    return [2 /*return*/, { hash: hash, confirmation: confirmation }];
                            }
                        });
                    }); };
                    originate = function (_arg) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            throw new Error("origination not implemented for kukai provider");
                        });
                    }); };
                    batch = function (args) { return __awaiter(_this, void 0, void 0, function () {
                        var ts, hash, confirmation;
                        var _this = this;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    ts = args.map(mk_transfer_params);
                                    return [4 /*yield*/, embed.send(ts)];
                                case 1:
                                    hash = _a.sent();
                                    confirmation = function () { return __awaiter(_this, void 0, void 0, function () {
                                        var r;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4 /*yield*/, embed.trackOperation(hash)];
                                                case 1:
                                                    r = _a.sent();
                                                    if (r.failed)
                                                        throw new Error(r.error);
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); };
                                    return [2 /*return*/, { hash: hash, confirmation: confirmation }];
                            }
                        });
                    }); };
                    sign = function (bytes, type) { return __awaiter(_this, void 0, void 0, function () {
                        var prefix, message, payload, signature;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    prefix = (type == "message") ? (0, base_1.tezos_signed_message_prefix)() : '';
                                    message = prefix + bytes;
                                    payload = (0, base_1.pack_string)(message);
                                    return [4 /*yield*/, embed.signExpr(payload)];
                                case 1:
                                    signature = _a.sent();
                                    return [2 /*return*/, { signature: signature, prefix: prefix }];
                            }
                        });
                    }); };
                    address = function () { return __awaiter(_this, void 0, void 0, function () {
                        var user;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, get_user(embed)];
                                case 1:
                                    user = _a.sent();
                                    return [2 /*return*/, user.pkh];
                            }
                        });
                    }); };
                    public_key = function () { return __awaiter(_this, void 0, void 0, function () {
                        var user;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, get_user(embed)];
                                case 1:
                                    user = _a.sent();
                                    return [2 /*return*/, user.pk];
                            }
                        });
                    }); };
                    balance = function () { return __awaiter(_this, void 0, void 0, function () {
                        var a;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, address()];
                                case 1:
                                    a = _a.sent();
                                    return [2 /*return*/, tk.tz.getBalance(a)];
                            }
                        });
                    }); };
                    chain_id = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                        return [2 /*return*/, tk.rpc.getChainId()];
                    }); }); };
                    storage = function (contract) { return __awaiter(_this, void 0, void 0, function () {
                        var c;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, tk.wallet.at(contract)];
                                case 1:
                                    c = _a.sent();
                                    return [2 /*return*/, c.storage()];
                            }
                        });
                    }); };
                    return [2 /*return*/, {
                            kind: "kukai",
                            transfer: transfer,
                            originate: originate,
                            batch: batch,
                            sign: sign,
                            address: address,
                            public_key: public_key,
                            storage: storage,
                            balance: balance,
                            chain_id: chain_id,
                            tk: tk,
                        }];
            }
        });
    });
}
exports.kukai_provider = kukai_provider;
