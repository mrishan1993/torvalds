"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
};
var _iframeSrc, _getIframe;
Object.defineProperty(exports, "__esModule", { value: true });
exports.IFrameKukai = void 0;
const util_1 = require("./util");
const iframeId = 'kukai-iframe';
class IFrameKukai {
    constructor(src) {
        _iframeSrc.set(this, void 0);
        _getIframe.set(this, () => {
            return document.getElementById(iframeId);
        });
        __classPrivateFieldSet(this, _iframeSrc, src);
    }
    show() {
        const f = __classPrivateFieldGet(this, _getIframe).call(this);
        if (f) {
            // f.hidden = true
            f.style.display = 'block';
        }
    }
    hide() {
        const f = __classPrivateFieldGet(this, _getIframe).call(this);
        if (f) {
            // f.hidden = true
            f.style.display = 'none';
        }
    }
    isHidden() {
        const f = __classPrivateFieldGet(this, _getIframe).call(this);
        return ((f === null || f === void 0 ? void 0 : f.style.display) === 'none');
    }
    toCard() {
        const f = __classPrivateFieldGet(this, _getIframe).call(this);
        if (f) {
            f.style.position = 'fixed';
            f.style.top = '';
            f.style.bottom = '70px';
            f.style.left = '70px';
            f.style.borderRadius = '10px';
            f.style.border = '0';
            f.style.width = '400px';
            f.style.height = '200px';
        }
    }
    isCard() {
        const f = __classPrivateFieldGet(this, _getIframe).call(this);
        return ((f === null || f === void 0 ? void 0 : f.style.borderRadius) === '10px');
    }
    toFullScreen() {
        const f = __classPrivateFieldGet(this, _getIframe).call(this);
        if (f) {
            f.style.position = 'fixed';
            f.style.top = '0';
            f.style.left = '0';
            f.style.borderRadius = '0px';
            f.style.border = '0';
            f.style.width = '100%';
            f.style.height = '100%';
        }
    }
    async init(instanceId) {
        if (!__classPrivateFieldGet(this, _getIframe).call(this)) {
            let iframe = document.createElement('iframe');
            const params = instanceId ? `?instanceId=${instanceId}` : '';
            iframe.src = __classPrivateFieldGet(this, _iframeSrc) + "/embedded" + params;
            iframe.id = iframeId;
            iframe.style.zIndex = '99999';
            iframe.style.display = 'none';
            // sandbox attributes
            // TODO jsDOM does not impl iFrame sandbox attrs, so these must be commented out when running tests
            // scripts must be allowed to run or Kukai will not run
            iframe.sandbox.add("allow-scripts");
            // same origin must be allowed or message events will be blocked by CORS and storage will not work
            iframe.sandbox.add('allow-same-origin');
            // popups allowed to make oauth work
            iframe.sandbox.add('allow-popups');
            // forms allowed to make oauth work
            iframe.sandbox.add('allow-forms');
            const { promise, deferred } = util_1.defer();
            try {
                iframe.addEventListener('load', () => deferred.resolve());
                document.body.appendChild(iframe);
                return await promise.then(() => this.toFullScreen());
            }
            catch (err) {
                deferred.reject(err);
                throw err;
            }
        }
        else {
            throw new Error("Kukai-Embed Already Present");
        }
    }
    get isInit() {
        return !!__classPrivateFieldGet(this, _getIframe).call(this);
    }
    deinit() {
        const f = __classPrivateFieldGet(this, _getIframe).call(this);
        if (f) {
            document.body.removeChild(f);
        }
    }
    request(message) {
        var _a, _b;
        (_b = (_a = __classPrivateFieldGet(this, _getIframe).call(this)) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.postMessage(JSON.stringify(message), 
        // TODO this may cause issues if a careless user overrides src as an empty string
        __classPrivateFieldGet(this, _iframeSrc) ? __classPrivateFieldGet(this, _iframeSrc) : "*");
    }
}
exports.IFrameKukai = IFrameKukai;
_iframeSrc = new WeakMap(), _getIframe = new WeakMap();
