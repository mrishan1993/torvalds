import { PartialTezosTransactionOperation } from '@airgap/beacon-sdk';
import { Networks, TrackResponse, LoginInfo, EmbedConfig, Template, LoginConfig } from './types';
export { Networks };
export * from './types';
export declare class KukaiEmbed {
    #private;
    /**
     * Constructs a {@link KukaiEmbed} instance, using the given network OR with override src
     *
     * @param network - The network which the Kukai instance will use, OR the source of the Kukai instance
     */
    constructor(cfg?: EmbedConfig);
    /**
     * Initializes the Kukai Embed in the page
     *
     * @remarks
     * This method injects an IFrame into the document body which contains a Kukai instance. The returned
     * promise resolves when the iframe content has finished loading and a message has been exchanged with
     * the Kukai instance
     */
    init(): Promise<void>;
    /**
     * Indicates whether the embed is fully initialized
     *
     * @returns the initialization state of the embed
     */
    get initialized(): boolean;
    deinit(): void;
    get user(): LoginInfo | null;
    /**
     * Initiates the User Login flow for the embed
     *
     * @remarks
     * This will {@link KukaiEmbed.show | show} the embed containing a DirectAuth component
     *
     * @returns the Login information for the User
     */
    login(config?: LoginConfig): Promise<LoginInfo>;
    /**
     * Logs out of the embedded Kukai instance
     *
     * @returns the Logout result with potential error info
     */
    logout(): Promise<void>;
    /**
     * Sends a transaction to be signed and broadcast
     *
     * @remarks
     * Only one set of operations can be sent at a time. If send is called while a previous is still pending,
     * an error will be thrown
     *
     * @param operations - A list of Tezos operations to sign and broadcast
     * @returns the operation hash resulting from broadcasting the operations
     */
    send(operations: PartialTezosTransactionOperation[], ui?: Template): Promise<string>;
    /**
     * Tracks the status of an operation in the network
     *
     * @param opHash - The operation hash used to track the status of the operation
     * @returns the result of the transaction, either confirmation or rejection
     */
    trackOperation(opHash: string): Promise<TrackResponse>;
    /**
     * Signs a message with associated Kukai UI
     *
     * @param hexExpr - The hex encoded Micheline expression
     * @returns the detached signature made over the given message, encoded as baes58check
     */
    signExpr(hexExpr: string, ui?: Template): Promise<string>;
    /**
     * Accepts a challenge and returns an auth token and signature
     *
     * @param requestId - The ID to represent this instance of authentication
     * @param nonce - The challange string to sign
     * @returns the
     */
    authenticate(requestId: string, nonce: string): Promise<{
        message: string;
        signature: string;
    }>;
    private toggle;
}
