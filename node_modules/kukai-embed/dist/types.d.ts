import { PartialTezosTransactionOperation } from '@airgap/beacon-sdk';
export declare enum Networks {
    mainnet = "mainnet",
    delphinet = "delphinet",
    edonet = "edonet",
    florencenet = "florencenet",
    granadanet = "granadanet",
    hangzhounet = "hangzhounet",
    dev = "dev",
    local = "local"
}
export interface EmbedConfig {
    net?: Networks | string;
    icon?: boolean;
    enableLogging?: boolean;
}
export declare enum TypeOfLogin {
    Google = "google",
    Reddit = "reddit",
    Twitter = "twitter",
    Facebook = "facebook"
}
export declare enum LoginPrio {
    Low = "low",
    High = "high"
}
export interface LoginConfig {
    loginOptions?: TypeOfLogin[];
    buttonsVertically?: boolean;
    customSpinnerDismissal?: boolean;
    strictAuth?: boolean;
    authParams?: AuthParams;
    customPrio?: LoginPrio;
}
export interface MessageSink {
    request: (message: RequestMessage) => void;
}
export interface DeferredPromise<T, E extends Error = Error> {
    resolve: (ret: T) => void;
    reject: (err: E) => void;
}
export declare type LoginInfo = {
    pk: string;
    pkh: string;
    userData: {
        typeOfLogin: TypeOfLogin;
        id: string;
    };
    authResponse?: {
        message: string;
        signature: string;
    };
    dismissCallback?: () => void;
};
interface Description {
    text?: string;
    imgUrl?: string;
}
export declare type Template = (BaseTemplate & {
    silent: false | undefined;
}) | {
    silent: true;
};
export interface BaseTemplate {
    action?: string;
    button?: string;
    buttonsVertically?: boolean;
    descriptions: Description[];
}
export interface AuthParams {
    id?: string;
    nonce?: string;
}
export declare enum RequestTypes {
    loginRequest = "login_request",
    operationRequest = "operation_request",
    trackRequest = "track_request",
    logoutRequest = "logout_request",
    signExprRequest = "sign_expr_request",
    authRequest = "authentication_request",
    cardRequest = "card_request",
    dismissRequest = "dismiss_request"
}
export declare enum ResponseTypes {
    initComplete = "init_complete",
    loginResponse = "login_response",
    operationResponse = "operation_response",
    trackResponse = "track_response",
    logoutResponse = "logout_response",
    signExprResponse = "sign_expr_response",
    authResponse = "authentication_response",
    cardResponse = "card_response",
    dismissResponse = "dismiss_response"
}
export declare type Success<T = {}> = T & {
    failed: false;
};
export declare type Failure<T = {}> = T & {
    failed: true;
    error: string;
    errorMessage?: string;
};
export declare type Request<T extends RequestTypes, R = {}> = {
    type: T;
} & R;
export declare type Response<T extends ResponseTypes, S = {}, F = {}> = {
    type: T;
} & (Success<S> | Failure<F>);
export declare type LoginRequest = Request<RequestTypes.loginRequest, {
    config: LoginConfig;
}>;
export declare type DismissRequest = Request<RequestTypes.dismissRequest>;
export declare type OperationRequest = Request<RequestTypes.operationRequest, {
    operations: PartialTezosTransactionOperation[];
    ui?: Template;
}>;
export declare type TrackRequest = Request<RequestTypes.trackRequest, {
    opHash: string;
}>;
export declare type LogoutRequest = Request<RequestTypes.logoutRequest>;
export declare type SignExprRequest = Request<RequestTypes.signExprRequest, {
    expr: string;
    ui?: Template;
}>;
export declare type AuthRequest = Request<RequestTypes.authRequest, AuthParams>;
export declare type CardRequest = Request<RequestTypes.cardRequest, {
    show: boolean;
}>;
export declare type Init = Response<ResponseTypes.initComplete>;
export declare type LoginResponse = Response<ResponseTypes.loginResponse, LoginInfo & {
    instanceId: string;
}>;
export declare type DismissResponse = Response<ResponseTypes.dismissResponse>;
export declare type OperationResponse = Response<ResponseTypes.operationResponse, {
    opHash: string;
}>;
export declare type TrackResponse = Response<ResponseTypes.trackResponse, {
    opHash: string;
}, {
    opHash: string;
}>;
export declare type LogoutResponse = Response<ResponseTypes.logoutResponse, {
    instanceId: string;
}>;
export declare type SignExprResponse = Response<ResponseTypes.signExprResponse, {
    signature: string;
}>;
export declare type AuthResponse = Response<ResponseTypes.authResponse, {
    message: string;
    signature: string;
}>;
export declare type CardResponse = Response<ResponseTypes.cardResponse>;
export declare type RequestMessage = LoginRequest | OperationRequest | TrackRequest | LogoutRequest | SignExprRequest | AuthRequest | LogoutRequest | CardRequest | DismissRequest;
export declare type ResponseMessage = Init | LoginResponse | OperationResponse | TrackResponse | LogoutResponse | SignExprResponse | AuthResponse | CardResponse | DismissResponse;
export {};
